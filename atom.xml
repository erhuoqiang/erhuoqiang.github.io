<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep moving</title>
  <icon>https://www.gravatar.com/avatar/b4ecaacec1bb130621e49fbfe0ebf796</icon>
  <subtitle>时间换天赋,坚持换机遇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://erhuoqiang.github.io/"/>
  <updated>2018-05-20T02:35:27.538Z</updated>
  <id>http://erhuoqiang.github.io/</id>
  
  <author>
    <name>erhuoqiang</name>
    <email>454923998@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>I Love Why ^_^</title>
    <link href="http://erhuoqiang.github.io/2018/05/19/I-Love-Why/"/>
    <id>http://erhuoqiang.github.io/2018/05/19/I-Love-Why/</id>
    <published>2018-05-19T15:56:05.000Z</published>
    <updated>2018-05-20T02:35:27.538Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/erhuoqiang/resource/blob/master/1.jpg?raw=true" alt="当年很帅" title="">                </div>                <div class="image-caption">当年很帅</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/erhuoqiang/resource/blob/master/2.jpg?raw=true" alt="你一直都很美" title="">                </div>                <div class="image-caption">你一直都很美</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/erhuoqiang/resource/blob/master/3.jpg?raw=true" alt="可以的话" title="">                </div>                <div class="image-caption">可以的话</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/erhuoqiang/resource/blob/master/4.jpg?raw=true" alt="做我老婆吧!" title="">                </div>                <div class="image-caption">做我老婆吧!</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/erhuoqiang/resource/blob/master/5.jpg?raw=true" alt="王含颖" title="">                </div>                <div class="image-caption">王含颖</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vimtutor总结汇总.md</title>
    <link href="http://erhuoqiang.github.io/2018/05/10/vimtutor%E6%80%BB%E7%BB%93%E6%B1%87%E6%80%BB-md/"/>
    <id>http://erhuoqiang.github.io/2018/05/10/vimtutor总结汇总-md/</id>
    <published>2018-05-10T11:25:03.000Z</published>
    <updated>2018-05-10T11:32:15.349Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>将vimtutor里面的总结汇总在一起便于复习</p></blockquote><blockquote><p>第一章</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  1. 光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。</span><br><span class="line">         h (左移)       j (下行)       k (上行)     l (右移)</span><br><span class="line"></span><br><span class="line">  2. 欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt;</span><br><span class="line"></span><br><span class="line">  3. 欲退出 Vim 编辑器，请输入 &lt;ESC&gt;   :q!   &lt;回车&gt; 放弃所有改动。</span><br><span class="line">                      或者输入 &lt;ESC&gt;   :wq   &lt;回车&gt; 保存改动。</span><br><span class="line"></span><br><span class="line">  4. 在正常模式下删除光标所在位置的字符，请按： x</span><br><span class="line"></span><br><span class="line">  5. 欲插入或添加文本，请输入：</span><br><span class="line"></span><br><span class="line">         i   输入欲插入文本   &lt;ESC&gt;             在光标前插入文本</span><br><span class="line">         A   输入欲添加文本   &lt;ESC&gt;             在一行后添加文本</span><br><span class="line"></span><br><span class="line">特别提示：按下 &lt;ESC&gt; 键会带您回到正常模式或者撤消一个不想输入或部分完整</span><br><span class="line">的命令。</span><br></pre></td></tr></table></figure><blockquote><p>第二章</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. 欲从当前光标删除至下一个单词，请输入：dw</span><br><span class="line">2. 欲从当前光标删除至当前行末尾，请输入：d$</span><br><span class="line">3. 欲删除整行，请输入：dd</span><br><span class="line"></span><br><span class="line">4. 欲重复一个动作，请在它前面加上一个数字：2w</span><br><span class="line">5. 在正常模式下修改命令的格式是：</span><br><span class="line">             operator   [number]   motion</span><br><span class="line">   其中：</span><br><span class="line">     operator - 操作符，代表要做的事情，比如 d 代表删除</span><br><span class="line">     [number] - 可以附加的数字，代表动作重复的次数</span><br><span class="line">     motion   - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，</span><br><span class="line">                $ 代表行末等等。</span><br><span class="line"></span><br><span class="line">6. 欲移动光标到行首，请按数字0键：0</span><br><span class="line"></span><br><span class="line">7. 欲撤消以前的操作，请输入：u (小写的u)</span><br><span class="line">   欲撤消在一行中所做的改动，请输入：U (大写的U)</span><br><span class="line">   欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R</span><br></pre></td></tr></table></figure><blockquote><p>第三章</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. 要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除</span><br><span class="line">   的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置</span><br><span class="line">   于当前光标所在行的下一行。</span><br><span class="line"></span><br><span class="line">2. 要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字</span><br><span class="line">   符即可。</span><br><span class="line"></span><br><span class="line">3. 更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。</span><br><span class="line">   比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当</span><br><span class="line">   前光标到行末的内容。</span><br><span class="line"></span><br><span class="line">4. 更改类命令的格式是：</span><br><span class="line"></span><br><span class="line">c   [number]   motion</span><br></pre></td></tr></table></figure><blockquote><p>第四章</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. CTRL-G 用于显示当前光标所在位置和文件状态信息。</span><br><span class="line">   G 用于将光标跳转至文件最后一行。</span><br><span class="line">   先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。</span><br><span class="line">   gg 用于将光标跳转至文件第一行。</span><br><span class="line"></span><br><span class="line">2. 输入 / 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。</span><br><span class="line">   输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。</span><br><span class="line">   完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查</span><br><span class="line">   找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。</span><br><span class="line"></span><br><span class="line">3. 如果光标当前位置是括号(、)、[、]、&#123;、&#125;，按 % 会将光标移动到配对的括号上。</span><br><span class="line"></span><br><span class="line">4. 在一行内替换头一个字符串 old 为新的字符串 new，请输入  :s/old/new</span><br><span class="line">   在一行内替换所有的字符串 old 为新的字符串 new，请输入  :s/old/new/g</span><br><span class="line">   在两行内替换所有的字符串 old 为新的字符串 new，请输入  :#,#s/old/new/g</span><br><span class="line">   在文件内替换所有的字符串 old 为新的字符串 new，请输入  :%s/old/new/g</span><br><span class="line">   进行全文替换时询问用户确认每个替换需添加 c 标志        :%s/old/new/gc</span><br></pre></td></tr></table></figure><blockquote><p>第五章</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. :!command 用于执行一个外部命令 command。</span><br><span class="line"></span><br><span class="line">   请看一些实际例子：</span><br><span class="line">(MS-DOS)  (Unix)</span><br><span class="line"> :!dir   :!ls   -  用于显示当前目录的内容。</span><br><span class="line"> :!del FILENAME   :!rm FILENAME   -  用于删除名为 FILENAME 的文件。</span><br><span class="line"></span><br><span class="line">2. :w FILENAME  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文</span><br><span class="line">   件中。</span><br><span class="line"></span><br><span class="line">3. v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件</span><br><span class="line">   FILENAME 中。</span><br><span class="line"></span><br><span class="line">4. :r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置</span><br><span class="line">   后面。</span><br><span class="line"></span><br><span class="line">5. :r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。</span><br></pre></td></tr></table></figure><blockquote><p>第六章</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> 1. 输入小写的 o 可以在光标下方打开新的一行并进入插入模式。</span><br><span class="line">    输入大写的 O 可以在光标上方打开新的一行。</span><br><span class="line"></span><br><span class="line"> 2. 输入小写的 a 可以在光标所在位置之后插入文本。</span><br><span class="line">    输入大写的 A 可以在光标所在行的行末之后插入文本。</span><br><span class="line"></span><br><span class="line"> 3. e 命令可以使光标移动到单词末尾。</span><br><span class="line"></span><br><span class="line"> 4. 操作符 y 复制文本，p 粘贴先前复制的文本。</span><br><span class="line"></span><br><span class="line"> 5. 输入大写的 R 将进入替换模式，直至按 &lt;ESC&gt; 键回到正常模式。</span><br><span class="line"></span><br><span class="line"> 6. 输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下：</span><br><span class="line"> &apos;ic&apos; &apos;ignorecase&apos;查找时忽略字母大小写</span><br><span class="line">&apos;is&apos; &apos;incsearch&apos;查找短语时显示部分匹配</span><br><span class="line">&apos;hls&apos; &apos;hlsearch&apos;高亮显示所有的匹配短语</span><br><span class="line">    选项名可以用完整版本，也可以用缩略版本。</span><br><span class="line"></span><br><span class="line"> 7. 在选项前加上 no 可以关闭选项：  :set noic</span><br></pre></td></tr></table></figure><blockquote><p>第七章</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 输入 :help 或者按 &lt;F1&gt; 键或 &lt;Help&gt; 键可以打开帮助窗口。</span><br><span class="line"></span><br><span class="line">2. 输入 :help cmd 可以找到关于 cmd 命令的帮助。</span><br><span class="line"></span><br><span class="line">3. 输入 CTRL-W CTRL-W  可以使您在窗口之间跳转。</span><br><span class="line"></span><br><span class="line">4. 输入 :q 以关闭帮助窗口</span><br><span class="line"></span><br><span class="line">5. 您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。</span><br><span class="line"></span><br><span class="line">6. 当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。</span><br><span class="line">   按 &lt;TAB&gt; 可以使用一个补全。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;将vimtutor里面的总结汇总在一起便于复习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;第一章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LRU 缓存算法-C语言</title>
    <link href="http://erhuoqiang.github.io/2018/05/08/LRU-%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95-C%E8%AF%AD%E8%A8%80/"/>
    <id>http://erhuoqiang.github.io/2018/05/08/LRU-缓存算法-C语言/</id>
    <published>2018-05-08T08:51:50.000Z</published>
    <updated>2018-05-10T07:35:17.516Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目背景:去年底项目需求对数据进行缓存并频繁的获取,所以选用LRU对其进行管理<br>以下代码在vs2017下测试通过，无内存泄漏，功能正常<br><a href="https://baike.baidu.com/item/LRU/1269842?fr=aladdin" target="_blank" rel="noopener">LRU介绍</a></p></blockquote><h3 id="LRUCacheImp-c"><a href="#LRUCacheImp-c" class="headerlink" title="LRUCacheImp.c"></a>LRUCacheImp.c</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;LRUCacheImp.h&quot;</span><br><span class="line"></span><br><span class="line">#define TRY_AGAIN_TIME 10</span><br><span class="line">//限定容量200</span><br><span class="line">#define MAX_CAPACITY_NUM 200</span><br><span class="line">//hashkey最大序号数 0~(MAX_HASH_KEY_NUM-1)</span><br><span class="line">#define MAX_HASH_KEY_NUM 65535</span><br><span class="line"></span><br><span class="line">//#define USE_FreeRTOS_MEM_MANAGE</span><br><span class="line">#ifdef USE_FreeRTOS_MEM_MANAGE</span><br><span class="line">#define MALLOC(SIZE) pvPortMalloc(SIZE)</span><br><span class="line">#define FREE(POINT)  vPortFree(POINT)</span><br><span class="line">#else </span><br><span class="line">#define MALLOC(SIZE) malloc(SIZE)</span><br><span class="line">#define FREE(POINT)  free(POINT)</span><br><span class="line">#endif </span><br><span class="line"></span><br><span class="line">LRUCache *lrucache = NULL;</span><br><span class="line"></span><br><span class="line">static void FreeCacheEntry(CacheEntry *entry) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">if(entry == NULL) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">lrucache-&gt;lru_hash_map[entry-&gt;hash_key] = NULL;</span><br><span class="line">FREE(entry-&gt;data);</span><br><span class="line">FREE(entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void FreeLruList(LRUCache *lrucache) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">if(lrucache == NULL) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CacheEntry *head_entry = lrucache-&gt;lru_list_head;</span><br><span class="line"></span><br><span class="line">while(head_entry) &#123;</span><br><span class="line">CacheEntry *temp_entry = head_entry-&gt;lru_list_next;</span><br><span class="line">FreeCacheEntry(head_entry);</span><br><span class="line">head_entry = temp_entry;</span><br><span class="line">--lrucache-&gt;lru_list_num;</span><br><span class="line">&#125;</span><br><span class="line">lrucache-&gt;lru_list_head = NULL;</span><br><span class="line">lrucache-&gt;lru_list_tail = NULL;</span><br><span class="line">if(lrucache-&gt;lru_list_num != 0) &#123;</span><br><span class="line">err_printf(&quot;entry not clear up\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static inline unsigned short int HashKey(LRUCache *lrucache, unsigned short int key) &#123;</span><br><span class="line">return key%lrucache-&gt;hash_key_max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static CacheEntry *GetCacheEntryFromHashMap(LRUCache *lrucache, unsigned short int key) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">if(lrucache == NULL || lrucache-&gt;lru_hash_map == NULL) &#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unsigned short int hash_key = HashKey(lrucache,key);</span><br><span class="line">CacheEntry *entry = lrucache-&gt;lru_hash_map[hash_key];</span><br><span class="line">if(entry) &#123;</span><br><span class="line">if(entry-&gt;hash_key == hash_key)&#123;</span><br><span class="line">return entry;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">err_printf(&quot;cache entry hashkey != key\n&quot;); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void RemoveEntryFromList(LRUCache *lrucache, CacheEntry *entry) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">if(entry == NULL || lrucache-&gt;lru_list_head == NULL)&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(lrucache-&gt;lru_list_head == lrucache-&gt;lru_list_tail) &#123;</span><br><span class="line">//only one entry</span><br><span class="line">lrucache-&gt;lru_list_head = lrucache-&gt;lru_list_tail = NULL;</span><br><span class="line">&#125; else if(lrucache-&gt;lru_list_head == entry) &#123;</span><br><span class="line">lrucache-&gt;lru_list_head = entry-&gt;lru_list_next;</span><br><span class="line">lrucache-&gt;lru_list_head-&gt;lru_list_pre = NULL;</span><br><span class="line">&#125; else if(lrucache-&gt;lru_list_tail == entry) &#123;</span><br><span class="line">lrucache-&gt;lru_list_tail = entry-&gt;lru_list_pre;</span><br><span class="line">entry-&gt;lru_list_pre-&gt;lru_list_next = NULL;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">entry-&gt;lru_list_pre-&gt;lru_list_next = entry-&gt;lru_list_next;</span><br><span class="line">    entry-&gt;lru_list_next-&gt;lru_list_pre = entry-&gt;lru_list_pre;</span><br><span class="line">&#125;</span><br><span class="line">lrucache-&gt;lru_hash_map[HashKey(lrucache, entry-&gt;hash_key)] = NULL;</span><br><span class="line">--lrucache-&gt;lru_list_num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void RemoveAndFreeListTailEntry(LRUCache *lrucache) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">CacheEntry *tail_entry = lrucache-&gt;lru_list_tail;</span><br><span class="line">RemoveEntryFromList(lrucache, tail_entry);</span><br><span class="line">FreeCacheEntry(tail_entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void InsertEntryToListHead(LRUCache *lrucache, CacheEntry *entry) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">++lrucache-&gt;lru_list_num;</span><br><span class="line">if (lrucache-&gt;lru_list_num &gt; lrucache-&gt;cache_capacity) &#123;</span><br><span class="line">    RemoveAndFreeListTailEntry(lrucache);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">if(lrucache-&gt;lru_list_head == NULL &amp;&amp; lrucache-&gt;lru_list_tail == NULL) &#123;</span><br><span class="line">entry-&gt;lru_list_next = NULL;</span><br><span class="line">entry-&gt;lru_list_pre = NULL;</span><br><span class="line">lrucache-&gt;lru_list_head = lrucache-&gt;lru_list_tail = entry;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">entry-&gt;lru_list_next = lrucache-&gt;lru_list_head;</span><br><span class="line">entry-&gt;lru_list_pre = NULL;</span><br><span class="line">lrucache-&gt;lru_list_head-&gt;lru_list_pre = entry;</span><br><span class="line">lrucache-&gt;lru_list_head = entry;</span><br><span class="line">&#125;</span><br><span class="line">lrucache-&gt;lru_hash_map[HashKey(lrucache, entry-&gt;hash_key)] = entry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void UpdateLruListEntryPosition(LRUCache *lrucache, CacheEntry *entry) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">RemoveEntryFromList(lrucache, entry);</span><br><span class="line">InsertEntryToListHead(lrucache, entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DATA_TYPE *NewDataType(LRUCache *lrucache, unsigned int byte) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">if(lrucache == NULL) &#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DATA_TYPE *data = (DATA_TYPE *)MALLOC(byte);</span><br><span class="line">int try_again_time = TRY_AGAIN_TIME;</span><br><span class="line">while(data == NULL) &#123;</span><br><span class="line">RemoveAndFreeListTailEntry(lrucache);</span><br><span class="line">data = (DATA_TYPE *)MALLOC(byte);</span><br><span class="line">--try_again_time;</span><br><span class="line">if(try_again_time &lt;= 0) &#123;</span><br><span class="line">err_printf(&quot;malloc return NULL,already try call again %d time\n&quot;,TRY_AGAIN_TIME);</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int LruCacheCreate(unsigned short int capacity, unsigned short int hashkeymax, LRUCache **lrucache) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">if(lrucache == NULL) &#123;</span><br><span class="line">return -2;</span><br><span class="line">&#125;</span><br><span class="line">if(capacity &gt; hashkeymax) &#123;</span><br><span class="line">capacity = hashkeymax;</span><br><span class="line">warn_printf(&quot;LRUCache capacity &gt; hashkeymax,then capacity set to %d\n&quot;,hashkeymax);</span><br><span class="line">&#125;</span><br><span class="line">*lrucache = (LRUCache *)MALLOC(sizeof(LRUCache));</span><br><span class="line">if(*lrucache == NULL) &#123;</span><br><span class="line">err_printf(&quot;malloc return null\n&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">LRUCache *cache = *lrucache;</span><br><span class="line">cache-&gt;cache_capacity = capacity;</span><br><span class="line">cache-&gt;hash_key_max = hashkeymax;</span><br><span class="line">cache-&gt;lru_list_num = 0;</span><br><span class="line"></span><br><span class="line">cache-&gt;lru_hash_map = (CacheEntry **)MALLOC(sizeof(CacheEntry *) * hashkeymax);</span><br><span class="line">if(cache-&gt;lru_hash_map  == NULL) &#123;</span><br><span class="line">err_printf(&quot;malloc return null\n&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">memset((void *)cache-&gt;lru_hash_map, 0, sizeof(CacheEntry *) * hashkeymax);</span><br><span class="line"></span><br><span class="line">cache-&gt;lru_list_head = NULL;</span><br><span class="line">cache-&gt;lru_list_tail = NULL;</span><br><span class="line">err_printf(&quot;lru cache init success\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int LRUCacheDestory(LRUCache *lrucache) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">if(lrucache == NULL) &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">FreeLruList(lrucache);</span><br><span class="line">FREE(lrucache-&gt;lru_hash_map);</span><br><span class="line">FREE(lrucache);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int LRUCacheSet(LRUCache *lrucache, unsigned short int key, DATA_TYPE *data) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">if(data == NULL || lrucache == NULL) &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">CacheEntry *entry = GetCacheEntryFromHashMap(lrucache, key);</span><br><span class="line">if(entry == NULL) &#123;</span><br><span class="line">entry = (CacheEntry *)MALLOC(sizeof(CacheEntry));</span><br><span class="line">int try_again_time = TRY_AGAIN_TIME;</span><br><span class="line">while(entry == NULL) &#123;</span><br><span class="line">RemoveAndFreeListTailEntry(lrucache);</span><br><span class="line">entry = (CacheEntry *)MALLOC(sizeof(CacheEntry));</span><br><span class="line">--try_again_time;</span><br><span class="line">if(try_again_time &lt;= 0) &#123;</span><br><span class="line">err_printf(&quot;malloc return NULL,already try call again %d time\n&quot;,TRY_AGAIN_TIME);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;        </span><br><span class="line">entry-&gt;data = data;</span><br><span class="line">entry-&gt;hash_key = HashKey(lrucache,key);</span><br><span class="line">InsertEntryToListHead(lrucache, entry);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if(entry-&gt;data != data) &#123;</span><br><span class="line">FREE(entry-&gt;data);</span><br><span class="line">entry-&gt;data = data;</span><br><span class="line">&#125;</span><br><span class="line">UpdateLruListEntryPosition(lrucache, entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DATA_TYPE *LRUCacheGet(LRUCache *lruCache,  unsigned short int key) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">if(lruCache == NULL) &#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">CacheEntry *entry = GetCacheEntryFromHashMap(lruCache, key);</span><br><span class="line">  if (entry != NULL) &#123;</span><br><span class="line">UpdateLruListEntryPosition(lruCache, entry);</span><br><span class="line">    return entry-&gt;data;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">return NULL;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unsigned char QueryHashKeyMapHasData(LRUCache *lruCache,  unsigned short int key) &#123;</span><br><span class="line">info_printf(&quot;\n&quot;);</span><br><span class="line">if(lruCache == NULL) &#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">CacheEntry *entry = GetCacheEntryFromHashMap(lruCache, key);</span><br><span class="line">if (entry != NULL) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125; </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void LruCacheInit(void) &#123;</span><br><span class="line">if(lrucache == NULL) &#123;</span><br><span class="line">LruCacheCreate(MAX_CAPACITY_NUM, MAX_HASH_KEY_NUM, &amp;lrucache);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ClearLruListCache(void) &#123;</span><br><span class="line">FreeLruList(lrucache);</span><br><span class="line">&#125;</span><br><span class="line">//void LRUCachePrint(LRUCache *lrucache) &#123;</span><br><span class="line">//info_printf(&quot;\n&quot;);</span><br><span class="line">// info_printf(&quot;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&quot;);</span><br><span class="line">//info_printf(&quot;cache (key data):\n&quot;);</span><br><span class="line">//CacheEntry *entry = lrucache-&gt;lru_list_head;</span><br><span class="line">//while (entry) &#123;</span><br><span class="line">//printf(&quot;(%d, %d)\n&quot;, entry-&gt;hash_key, *entry-&gt;data);</span><br><span class="line">//entry = entry-&gt;lru_list_next;</span><br><span class="line">//&#125;</span><br><span class="line">//for (int i = 0; i &lt; lrucache-&gt;hash_key_max; i++) &#123;</span><br><span class="line">//if(i % 10 == 0)  &#123;</span><br><span class="line">//printf(&quot;\n&quot;);</span><br><span class="line">//&#125;</span><br><span class="line">//printf(&quot;%x &quot;, (int)lrucache-&gt;lru_hash_map[i]);</span><br><span class="line">//&#125;</span><br><span class="line">//info_printf(&quot;\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n&quot;);</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">//#include &lt;crtdbg.h&gt;</span><br><span class="line">//#ifdef _DEBUG  </span><br><span class="line">//#define new new(_NORMAL_BLOCK, __FILE__, __LINE__)  </span><br><span class="line">//#endif  </span><br><span class="line">//void EnableMemLeakCheck()</span><br><span class="line">//&#123;</span><br><span class="line">//int tmpFlag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);</span><br><span class="line">//tmpFlag |= _CRTDBG_LEAK_CHECK_DF;</span><br><span class="line">//_CrtSetDbgFlag(tmpFlag);</span><br><span class="line">//&#125;</span><br><span class="line">//int main() &#123;</span><br><span class="line"></span><br><span class="line">//EnableMemLeakCheck();</span><br><span class="line">//LRUCache *lrucache = NULL;</span><br><span class="line">//LruCacheCreate(10, 10, &amp;lrucache);</span><br><span class="line">//int *temp = NewDataType(lrucache, 0x10000000);</span><br><span class="line">//*temp = 108;</span><br><span class="line">//LRUCacheSet(lrucache, 20 + *temp, temp);</span><br><span class="line"></span><br><span class="line">////temp = NewDataType(lrucache, sizeof(int));</span><br><span class="line">//*temp = 108;</span><br><span class="line">//LRUCacheSet(lrucache, 20 + *temp, temp);</span><br><span class="line">//for (int i = 0; i &lt; 80; i++) &#123;</span><br><span class="line">//temp = NewDataType(lrucache, sizeof(int));</span><br><span class="line">//*temp = i%8;</span><br><span class="line">//LRUCacheSet(lrucache, *temp, temp);</span><br><span class="line">//&#125;</span><br><span class="line">//printf(&quot;%d\n&quot;,*LRUCacheGet(lrucache,1));</span><br><span class="line">//LRUCachePrint(lrucache);</span><br><span class="line">//temp = NewDataType(lrucache, 0xffffffff);</span><br><span class="line">//printf(&quot;%d\n&quot;, *LRUCacheGet(lrucache, 5));</span><br><span class="line">//LRUCachePrint(lrucache);</span><br><span class="line">//temp = NewDataType(lrucache, 0xffffffff);</span><br><span class="line">//LRUCachePrint(lrucache);</span><br><span class="line">//LRUCacheDestory(lrucache);</span><br><span class="line">//while(1);</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure><h3 id="LRUCacheImp-h"><a href="#LRUCacheImp-h" class="headerlink" title="LRUCacheImp.h"></a>LRUCacheImp.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _LRU_CACHE_IMP_H_</span><br><span class="line">#define _LRU_CACHE_IMP_H_</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &quot;Debug.h&quot;</span><br><span class="line"></span><br><span class="line">typedef int DATA_TYPE;</span><br><span class="line"></span><br><span class="line">typedef struct CacheEntry &#123;</span><br><span class="line">unsigned short int hash_key;</span><br><span class="line">DATA_TYPE *data;</span><br><span class="line"></span><br><span class="line">struct CacheEntry *lru_list_pre;</span><br><span class="line">struct CacheEntry *lru_list_next;</span><br><span class="line">&#125; CacheEntry;</span><br><span class="line"></span><br><span class="line">typedef struct LRUCache &#123;</span><br><span class="line">struct CacheEntry **lru_hash_map;  //hashmap</span><br><span class="line"></span><br><span class="line">struct CacheEntry *lru_list_head;  //point to lru list head entry</span><br><span class="line">struct CacheEntry *lru_list_tail;  //point to lru list tail entry</span><br><span class="line"></span><br><span class="line">unsigned short int lru_list_num; //current lru list entry num</span><br><span class="line">unsigned short int cache_capacity; //max entry num</span><br><span class="line">unsigned short int hash_key_max;   //key range is 0~hash_key_max</span><br><span class="line">&#125; LRUCache;</span><br><span class="line"></span><br><span class="line">#endif //_LRU_CACHE_IMP_H_</span><br></pre></td></tr></table></figure><h3 id="LRUCache-h"><a href="#LRUCache-h" class="headerlink" title="LRUCache.h"></a>LRUCache.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _LRU_CACHE_H_</span><br><span class="line">#define _LRU_CACHE_H_</span><br><span class="line"></span><br><span class="line">//  Created by xiaozhiqiang</span><br><span class="line"></span><br><span class="line">typedef struct LRUCache LRUCache;</span><br><span class="line">typedef struct CacheEntry  CacheEntry;</span><br><span class="line">typedef int DATA_TYPE;</span><br><span class="line"></span><br><span class="line">extern LRUCache *lrucache;</span><br><span class="line"></span><br><span class="line">void LruCacheInit(void);</span><br><span class="line">int LruCacheCreate(unsigned short int capacity, unsigned short int hashkeymax, LRUCache **lrucache);</span><br><span class="line">int LRUCacheDestory(LRUCache *lrucache);</span><br><span class="line">DATA_TYPE *LRUCacheGet(LRUCache *lrucache, unsigned short int key);</span><br><span class="line">int LRUCacheSet(LRUCache *lrucache, unsigned short int key, DATA_TYPE *data);</span><br><span class="line">//void LRUCachePrint(void *lruCache);</span><br><span class="line">DATA_TYPE *NewDataType(LRUCache *lrucache, unsigned int byte);</span><br><span class="line">unsigned char QueryHashKeyMapHasData(LRUCache *lruCache,  unsigned short int key);</span><br><span class="line">void ClearLruListCache(void);</span><br><span class="line">#endif //_LRU_CACHE_H_</span><br></pre></td></tr></table></figure><h3 id="Debug-h"><a href="#Debug-h" class="headerlink" title="Debug.h"></a>Debug.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _DEBUG_H_</span><br><span class="line">#define _DEBUG_H_</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#undef SHOW_INFO</span><br><span class="line">#define SHOW_INFO</span><br><span class="line"></span><br><span class="line">#ifdef SHOW_INFO</span><br><span class="line">#define info_printf(...) printf(&quot;[INFO] %s (%d):&quot;, __func__, __LINE__);printf(__VA_ARGS__)</span><br><span class="line">#else</span><br><span class="line">#define info_printf(...)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#undef WARNING</span><br><span class="line">#define WARNING</span><br><span class="line"></span><br><span class="line">#ifdef WARNING</span><br><span class="line">#define warn_printf(...) printf(&quot;[WARNING] %s (%d):&quot;, __func__, __LINE__);printf(__VA_ARGS__)</span><br><span class="line">#else</span><br><span class="line">#define warn_printf(...)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#undef ERROR</span><br><span class="line">#define ERROR</span><br><span class="line"></span><br><span class="line">#ifdef ERROR</span><br><span class="line">#define err_printf(...) printf(&quot;[ERROR] %s (%d):&quot;, __func__, __LINE__);printf(__VA_ARGS__)</span><br><span class="line">#else</span><br><span class="line">#define err_printf(...)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#endif //_DEBUG_H_</span><br></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>前几天在同事的影响下,决定开始写自己的技术博客,并参考了同事关于搭建Hexo<br>博客的文章还有网上一篇关于Hexo的文章.</p><blockquote><p><a href="http://xyz1001.xyz/2017/04/02/software-usage-of-hexo/" target="_blank" rel="noopener">同事-博客</a><br><a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">手把手教你使用Hexo搭建博客</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;项目背景:去年底项目需求对数据进行缓存并频繁的获取,所以选用LRU对其进行管理&lt;br&gt;以下代码在vs2017下测试通过，无内存泄漏，功能正常&lt;br&gt;&lt;a href=&quot;https://baike.baidu.com/item/LRU/1269842?
      
    
    </summary>
    
    
  </entry>
  
</feed>
